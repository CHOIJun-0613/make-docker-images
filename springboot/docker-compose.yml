# /path/to/your/project/docker-compose.yml
version: '3.8' # 사용 가능한 최신 버전 사용 권장

services:
  # Spring Boot 애플리케이션 서비스
  app:
    # 이미 빌드된 이미지를 사용하거나 Dockerfile 경로를 지정
    image: your-springboot-app-image:latest # 여기에 실제 이미지 이름을 넣으세요
    # build: . # Dockerfile이 현재 디렉토리에 있다면 주석 해제
    container_name: spring-app
    ports:
      - "8080:8080" # 호스트 8080 포트를 컨테이너 8080 포트에 매핑
    depends_on:
      - db # db 서비스가 시작된 후 app 서비스 시작
    environment:
      # Spring Boot 설정: MySQL 호스트 이름으로 서비스 이름 'db' 사용
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/your_database_name?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      - SPRING_DATASOURCE_USERNAME=your_mysql_user # MySQL 사용자 이름
      - SPRING_DATASOURCE_PASSWORD=your_mysql_password # MySQL 비밀번호
    networks:
      - app-network # 아래 정의된 네트워크 사용

  # MySQL 데이터베이스 서비스
  db:
    image: mysql:8.0 # 원하는 MySQL 버전 사용
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: your_root_password # 루트 비밀번호 설정
      MYSQL_DATABASE: your_database_name # 생성할 데이터베이스 이름
      MYSQL_USER: your_mysql_user # 생성할 사용자 이름
      MYSQL_PASSWORD: your_mysql_password # 생성할 사용자 비밀번호
    volumes:
      - mysql-data:/var/lib/mysql # 데이터 영속성을 위한 볼륨 마운트
    ports:
      - "3307:3306" # 호스트 3307 포트를 컨테이너 3306 포트에 매핑 (선택 사항, 직접 접속 확인용)
    networks:
      - app-network # 아래 정의된 네트워크 사용

# 사용할 네트워크 정의
networks:
  app-network:
    driver: bridge

# 데이터 영속성을 위한 볼륨 정의
volumes:
  mysql-data:
